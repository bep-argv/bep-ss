<バイリンガル拡張の方針>

1.  dTalkParamクラスの上にスピーチエンジンを表す中小クラスを作り、
DTalkerもOutloudもそれを継承する。

2.  ssContextクラスのメンバssは抽象化したエンジンクラスの配列とする。
ssContextに対する処理は必要に応じてエンジンすべてに反映されるようにす
る。初期化が終わった状態では一つのエンジンが一つのスレッドとなっている。

3.  ssDspDeviceクラスが使用中かどうかを見て、あいていたら先着順でそれ
ぞれのエンジンが利用権を取得して活動を始める。活動が終わったら
ssDspDeviceの利用権を返却し、待っているエンジンにブロードキャストで知
らせる。

4.  サイン波を発生する処理はメインのスレッドで行う。(分けてもよいがそ
の必要はなさそう)

5.  メインのコマンドキューには言語属性を持たせ、それはそのままそれぞれ
のエンジンにマッピングされる。メインのスレッドでキューをpopするときに
それぞれのエンジンに振り分ける。あるエンジンへのリクエストの連続から他
のエンジンに移行する時には、エンジン側のキューに終了の意味を示す特殊な
リクエストを挿入する。このリクエストを見て、エンジンは処理を止め、
ssDspDeviceの利用権を解放する。
dTalkParam::working`の扱いは現在曖昧。複数のエンジンがある場合、ここにエンジンのIDなど入れるべき？